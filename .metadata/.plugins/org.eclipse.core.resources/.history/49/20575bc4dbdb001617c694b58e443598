package com.niit.collaborationbackend.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.niit.collaborationbackend.DAO.FriendDAO;
import com.niit.collaborationbackend.model.Friend;

@RestController
public class FriendController {
	
	@Autowired
	Friend friend;
	
	@Autowired
	FriendDAO friendDAO;
	
	@Autowired(required=false)
	HttpSession session;
	
	
	@RequestMapping(value="/getMyFriendRequest",method=RequestMethod.GET)
	public ResponseEntity<List<Friend>> getMyFriendRequest(HttpSession session)
	{
		String loggedInUserId = (String) session.getAttribute("loggedInUserId");
		
		List<Friend> friendRequest = new ArrayList<Friend>();
		
		if(loggedInUserId==null)
		{
			friend.setErrorCode("404");
			friend.setErrorMessage("Please Login to Continue,.,");
			friendRequest.add(friend);
		}
		
		friendRequest= friendDAO.getMyFriendRequests(loggedInUserId);
		
		if(friendRequest.isEmpty())
		{
			friend.setErrorCode("404");
			friend.setErrorMessage("No friends are available,.,!!,.,!!,.,");
			friendRequest.add(friend);
		}
		
		return new ResponseEntity<List<Friend>>(friendRequest,HttpStatus.OK);
	}
	
	@RequestMapping(value="/getMyFriends",method=RequestMethod.GET)
	public ResponseEntity<List<Friend>> getMyFriends()
	{
		String loggedInUserId = (String) session.getAttribute("loggedInUserId");
		
		if(loggedInUserId==null)
		{
			friend.setErrorCode("404");
			friend.setErrorMessage("Please Login to Continue,.,");
		}
		return new ResponseEntity<List<Friend>>(friend,HttpStatus.OK);

	}

	
	
	@RequestMapping(value="/sendFriendRequest/{friendId}",method=RequestMethod.GET)
	public ResponseEntity<Friend> sendFriendRequest(@PathVariable("friendId") String friendId)
	{
		String loggedInUserId = (String) session.getAttribute("loggedInUserId");
		if(loggedInUserId==null)
		{
			friend.setErrorCode("404");
			friend.setErrorMessage("Please Login to Continue,.,");
		}
		else
		{
			friend.setId(friendDAO.maxID());
			friend.setStatus('N');
			friend.setEmailId(loggedInUserId);
			friend.setFriendEmailId(friendId);
			if(friendDAO.save(friend)==false)
			{
				friend.setErrorCode("404");
				friend.setErrorMessage("Error while adding friend ,.,please try again after sometime,.,!!,.,!!,.,");
			}
			else
			{
				friend.setErrorCode("200");
				friend.setErrorMessage("Friend Request has been sent");
			}
		}
		
		return new ResponseEntity<Friend>(friend,HttpStatus.OK);
	}
	
	
	@RequestMapping(value="/acceptFriendRequest/{friendId}",method=RequestMethod.GET)
	public ResponseEntity<Friend> acceptFriendRequest(@PathVariable("friendId") String friendEmailId)
	{
		friend = acceptOrRejectFriendRequest(friendEmailId, 'A');
		return new ResponseEntity<Friend>(friend,HttpStatus.OK);

	}

	
	@RequestMapping(value="/rejectFriendRequest/{friendId}",method=RequestMethod.GET)
	public ResponseEntity<Friend> rejectFriendRequest(@PathVariable("friendId") String friendEmailId)
	{
		friend = acceptOrRejectFriendRequest(friendEmailId, 'R');
		return new ResponseEntity<Friend>(friend,HttpStatus.OK);

	}

	
	
	
	@RequestMapping("/deleteFriend/{friendId}")
	public ResponseEntity<Friend> deleteFriend(@PathVariable("friendId") String friendId)
	{
		Friend friend = (Friend) friendDAO.getMyFriendRequests(friendId);
		if(friendDAO.delete(friend)==false)
		{
			friend.setErrorCode("404");
			friend.setErrorMessage("Error while deleting friend ,.,please try again after sometime,.,!!,.,!!,.,");
		}
		else
		{
			friend.setErrorCode("200");
			friend.setErrorMessage("Friend has been deleted");
		}
		
		return new ResponseEntity<Friend>(friend,HttpStatus.OK);
		
	}
	
	private Friend acceptOrRejectFriendRequest(String friendEmailId,char status)
	{
		String loggedInUser = (String) session.getAttribute("loggedInUser");
		if(loggedInUser==null)
		{
			friend.setErrorCode("404");
			friend.setErrorMessage("Please Login to Continue,.,");
		}
		else
		{
			friend = friendDAO.get(friendEmailId, loggedInUser);
			friend.setStatus(status);
			friendDAO.update(friend);
			friend.setErrorCode("200");
			friend.setErrorMessage("Operation has been Successsful");
		}
		return friend;
	}
}
